
					<-- asp core -->
================================================================================================
<-- connection string -->

"ConnectionStrings": {
"DefaultConnection": "Server=(localdb)\\mssqllocaldb;Database=MySiteDB;Trusted_Connection=True;MultipleActiveResultSets=true"
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<-- add database to creating -->

public void ConfigureServices(IServiceCollection services)
{
services.AddDbContext<AppDbContext>(options =>
options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<-- EF Core sql server package -->

<PackageGroup Include="Microsoft.EntityFrameworkCore.SqlServer" Version="2.2.300" />
================================================================================================
<-- data annotation and regular expression -->

1\ using System.ComponentModel.DataAnnotations;
2\ using System.ComponentModel.DataAnnotations.Schema;

[Key]								> set as primary key
[Column(TypeName="nvarchar(13)")]				> set column type in database
[Column(TypeName = "decimal(18, 2)")]				> set column type in database
[DatabaseGenerated(DatabaseGeneratedOption.Identity)]		> auto increment
[Range(1,50,ErrorMessage ="just from 1 to 50")]			> add range validation
[Required]							> not null
[Required(ErrorMessage="please enter name")]			> not null with show message
[Display(Name="student name")]					> change name property
[EmailAddress]							> must be email adress
[RegularExpression("[0-9]+", ErrorMessage ="asd")]		> just numeric
[RegularExpression(@"[a-zA-Z0-9 ]+")]				> just charsters english
[RegularExpression(@"[0-9\u0600-\u06FF ]+")]			> just charsters arabic
[RegularExpression(@"[a-zA-Z0-9\u0600-\u06FF ]+")]		> just charsters english and arabic
[MaxLength(30)]							> max length
[StringLength(30)]						> max length
[DefaultValue("top")]						> same last
[Table("Std")]							> set table name
[Column("stdName", Order= 2, TypeName= "nvarchar(50)", )] 	> set name and type and index
[Range(typeof(DateTime), "1/1/1966", "1/1/2020")]		> add date time validation
[Range(1, 100), DataType(DataType.Currency)]			> add validation and data type
public string Text { get; set; } = "top";			> set default value
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<-- security -->

[Authorize]
[Authorize(Roles ="admin")]
[Authorize(Roles ="admin , employee")]
[Authorize(Users ="mina top")]
[AllowAnonymous]
================================================================================================
<-- view html by condition -->

@if (this.User.IsInRole("admin"))
{
<h1> hellow admin mina </h1>
}

or

@if (this.User.Identity.IsAuthenticated)
{
<h1> hellow admin mina </h1>
}
================================================================================================
<-- get user ip or device name -->

string a = Request.UserHostAddress;
string b = Request.UserHostName;
================================================================================================
<-- excute code after some seconds -->

try{
System.Threading.Thread.Sleep(5000);		> write in action when add data in database
public actionResualt asd ()
{
var std = new student ()
{
id = 23,
name = "mina",
adress = "sohag"
};
return view(std);
}
}
================================================================================================
================================================================================================
			<-- Entity Framework Core -->
================================================================================================
================================================================================================
<-- one to one relationship -->

public class Student
{
    public int Id { get; set; }
    public string Name { get; set; }
       
    public virtual StudentAddress Address { get; set; }
}

public class StudentAddress
{
    public int StudentAddressId { get; set; }
    public string Address { get; set; }
    public string City { get; set; }
    public string State { get; set; }
    public string Country { get; set; }

    public int StudentId { get; set; }
    public virtual Student Student { get; set; }
}
================================================================================================
<-- one to many relationship -->

public class Author
{
    public int AuthorId { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public virtual ICollection<Book> Books { get; set; }
}

public class Book
{
    public int BookId { get; set; }
    public string Title { get; set; }
    public int AuthorId { get; set; }
    [ForeignKey("AuthorId")]
    public virtual Author Author { get; set; }
}
================================================================================================
<-- many to many relationship -->

public class Book
{
    public int BookId { get; set; }
    public string Title { get; set; }
    public Author Author { get; set; }
    public ICollection<BookCategory> BookCategories { get; set; }
}  

public class Category
{
    public int CategoryId { get; set; }
    public string CategoryName { get; set; }
    public ICollection<BookCategory> BookCategories { get; set; }
}  

public class BookCategory
{
    public int BookId { get; set; }
    public Book Book { get; set; }
    public int CategoryId { get; set; }
    public Category Category { get; set; }
}
================================================================================================
<-- make two foreignkey in one table from one table -->

 public class ApplicationDbContext : IdentityDbContext
    {

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            
            builder.Entity<City>().HasMany<Travel>().WithOne(m => m.CityFrom).OnDelete(DeleteBehavior.Restrict);
            builder.Entity<City>().HasMany<Travel>().WithOne(m => m.CityTo).OnDelete(DeleteBehavior.Restrict);

            builder.Entity<Travel>().HasOne<City>().WithMany(m => m.TravelFrom).OnDelete(DeleteBehavior.Restrict);
            builder.Entity<Travel>().HasOne<City>().WithMany(m => m.TravelTo).OnDelete(DeleteBehavior.Restrict);
        }

        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
            : base(options)
        {
        }
        public DbSet<Travel> Travels { get; set; }
	public DbSet<City> Cities{ get; set; }
        
    }
================================================================================================
<-- configure foregn key -->

public class Book
{
    public int BookId { get; set; }
    public string Title { get; set; }
    
    public int AuthorId { get; set; }

    [ForeignKey("AuthorId")]			<< this code
    public virtual Author Author { get; set; }
}
================================================================================================
<-- update query -->

var asd= context.Products.FirstOrDefault(item => item.ProductID == id);

if (entity != null)
        {
	entity.UnitPrice = 49.99;
	entity.Description = "Collector's edition";
	context.Products.Update(asd);
	context.SaveChanges();
        }
================================================================================================
<-- delete query -->

var asd= context.Products.FirstOrDefault(item => item.ProductID == id);

if (entity != null)
	{
		context.Products.Remove(asd);
		context.SaveChanges();
	}
================================================================================================
<-- transaction -->

using (var context = new MyContext())
{
    using (var transaction = context.Database.BeginTransaction())
    {
        try
        {
            var customer = context.Customers
                .Where(c => c.CustomerId == 2)
                .FirstOrDefault();
                customer.Address = "43 rue St. Laurent";

            context.SaveChanges();
             
            var newCustomer = new Customer
            {
                FirstName = "Elizabeth",
                LastName = "Lincoln",
                Address = "23 Tsawassen Blvd."
            };
             
            context.Customers.Add(newCustomer);
            context.SaveChanges();

            transaction.Commit();
        }
        catch (Exception)
        {
            transaction.Rollback();
        }
	finally
	{
	    transaction.Dispose();
	}
    }
}
================================================================================================
================================================================================================
================================================================================================
================================================================================================
================================================================================================
================================================================================================






































